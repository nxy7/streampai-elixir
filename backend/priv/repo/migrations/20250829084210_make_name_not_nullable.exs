defmodule Streampai.Repo.Migrations.MakeNameNotNullable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # First, populate usernames for users who don't have them
    populate_usernames()
    
    # Then make the field not nullable
    alter table(:users) do
      modify :name, :text, null: false
    end
  end

  defp populate_usernames do
    # Get all users without names
    users = repo().query!("SELECT id, email FROM users WHERE name IS NULL", [])
    
    Enum.each(users.rows, fn [id, email] ->
      username = generate_username_from_email(email)
      unique_username = ensure_unique_username(username)
      
      repo().query!(
        "UPDATE users SET name = $1 WHERE id = $2",
        [unique_username, id]
      )
    end)
  end

  defp generate_username_from_email(email) do
    email
    |> String.split("@")
    |> List.first()
    |> String.replace(~r/[^a-zA-Z0-9_]/, "_")  # Replace non-alphanumeric chars with underscore
    |> String.slice(0, 30)  # Limit length
  end

  defp ensure_unique_username(base_username) do
    find_unique_username(base_username, 0)
  end

  defp find_unique_username(base_username, suffix) do
    username = if suffix == 0, do: base_username, else: "#{base_username}#{suffix}"
    
    result = repo().query!("SELECT COUNT(*) FROM users WHERE name = $1", [username])
    count = result.rows |> List.first() |> List.first()
    
    if count == 0 do
      username
    else
      find_unique_username(base_username, suffix + 1)
    end
  end

  def down do
    alter table(:users) do
      modify :name, :text, null: true
    end
  end
end
