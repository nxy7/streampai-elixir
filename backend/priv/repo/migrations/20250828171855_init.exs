defmodule Streampai.Repo.Migrations.Init do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :confirmed_at, :utc_datetime_usec
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :text, null: false
      add :hashed_password, :text
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:streaming_account, primary_key: false) do
      add :user_id, :text, null: false, primary_key: true
      add :platform, :text, null: false, primary_key: true
      add :refresh_token, :text, null: false
      add :access_token, :text, null: false
      add :access_token_expires_at, :utc_datetime, null: false
      add :extra_data, :map, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:stream_donations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :amount, :decimal, null: false
      add :currency, :text, null: false, default: "USD"
      add :donor_name, :text, null: false
      add :message, :text
      add :platform, :text, null: false
      add :platform_donation_id, :text, null: false
      add :channel_id, :text, null: false
      add :donor_email, :text
      add :platform_metadata, :map, default: %{}
      add :featured, :boolean, default: false
      add :processed_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "stream_donations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:stream_donations, [:platform, :platform_donation_id],
             name: "stream_donations_unique_platform_donation_index"
           )

    create table(:raids, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :raider_channel_id, :text, null: false
      add :raider_username, :text, null: false
      add :target_channel_id, :text, null: false
      add :target_username, :text, null: false
      add :viewer_count, :bigint, null: false
      add :platform, :text, null: false
      add :platform_raid_id, :text
      add :message, :text
      add :platform_metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :raider_user_id,
          references(:users,
            column: :id,
            name: "raids_raider_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :target_user_id,
          references(:users,
            column: :id,
            name: "raids_target_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:patreons, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :patron_patreon_id, :text, null: false
      add :patron_name, :text, null: false
      add :patron_email, :text
      add :creator_patreon_id, :text, null: false
      add :pledge_amount, :decimal, null: false
      add :currency, :text, null: false, default: "USD"
      add :tier_id, :text
      add :tier_title, :text
      add :tier_description, :text
      add :status, :text, null: false, default: "active"
      add :patreon_pledge_id, :text, null: false
      add :patreon_campaign_id, :text, null: false
      add :pledge_created_at, :utc_datetime, null: false
      add :last_charge_date, :utc_datetime
      add :next_charge_date, :utc_datetime
      add :cancelled_at, :utc_datetime
      add :paused_at, :utc_datetime
      add :lifetime_support_cents, :bigint, null: false, default: 0
      add :pledge_relationship_start, :utc_datetime
      add :patreon_metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :patron_user_id,
          references(:users,
            column: :id,
            name: "patreons_patron_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :creator_user_id,
          references(:users,
            column: :id,
            name: "patreons_creator_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:patreons, [:patreon_pledge_id],
             name: "patreons_unique_patreon_pledge_index"
           )

    create unique_index(:patreons, [:patron_patreon_id, :creator_patreon_id],
             name: "patreons_unique_patron_creator_index"
           )

    create table(:livestream_metric, primary_key: false) do
      add :livestream_id, :uuid, null: false, primary_key: true
      add :youtube_viewers, :bigint, null: false, default: 0
      add :twitch_viewers, :bigint, null: false, default: 0

      add :created_at, :utc_datetime,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')"),
        primary_key: true
    end

    create table(:livestream, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :started_at, :utc_datetime, null: false
      add :ended_at, :utc_datetime
    end

    create table(:chat_messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :message, :text, null: false
      add :username, :text, null: false
      add :platform, :text, null: false
      add :channel_id, :text, null: false
      add :is_moderator, :boolean, default: false
      add :is_patreon, :boolean, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "chat_messages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :livestream_id,
          references(:livestream,
            column: :id,
            name: "chat_messages_livestream_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:chat_messages, "chat_messages_user_id_fkey")

    drop constraint(:chat_messages, "chat_messages_livestream_id_fkey")

    drop table(:chat_messages)

    drop table(:livestream)

    drop table(:livestream_metric)

    drop_if_exists unique_index(:patreons, [:patron_patreon_id, :creator_patreon_id],
                     name: "patreons_unique_patron_creator_index"
                   )

    drop_if_exists unique_index(:patreons, [:patreon_pledge_id],
                     name: "patreons_unique_patreon_pledge_index"
                   )

    drop constraint(:patreons, "patreons_patron_user_id_fkey")

    drop constraint(:patreons, "patreons_creator_user_id_fkey")

    drop table(:patreons)

    drop constraint(:raids, "raids_raider_user_id_fkey")

    drop constraint(:raids, "raids_target_user_id_fkey")

    drop table(:raids)

    drop_if_exists unique_index(:stream_donations, [:platform, :platform_donation_id],
                     name: "stream_donations_unique_platform_donation_index"
                   )

    drop constraint(:stream_donations, "stream_donations_user_id_fkey")

    drop table(:stream_donations)

    drop table(:streaming_account)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
