# Code Maintenance & Quality Improvements

## Test Coverage & Quality (Critical - only 10% test coverage)
- Increase test coverage - Currently only 15 test files for 146 source files
- Add integration tests for external APIs beyond Cloudflare (follow pattern in api_client_test.exs)
- Add property-based testing for complex business logic using StreamData
- Add LiveView testing for dashboard components and widget functionality

## Code Organization & Structure
- Extract shared LiveView patterns - Many dashboard LiveViews (54 total) have similar mount/handle_event patterns
- Consolidate widget patterns - Standardize the widget creation pattern across alertbox/chat widgets
- Break down large files: core_components.ex (730 lines), dashboard_layout.ex (605 lines), donation_live.ex (564 lines)
- Extract business logic from LiveViews into domain contexts
- Reduce coupling between web layer and domain logic

## Documentation & Developer Experience
- Create architecture decision records (ADRs) for key architectural choices
- Improve development setup guide with step-by-step setup
- Document the 4-component widget pattern thoroughly
- Update existing MD files that seem outdated or incomplete

## Error Handling & Monitoring
- Standardize error handling across LiveViews and domain modules
- Add structured logging with proper metadata for debugging
- Implement health checks for external integrations (Cloudflare, OAuth providers)
- Add dead letter queue for failed background jobs
- Implement circuit breaker pattern for external API calls

## Performance & Scalability
- Database query optimization - Add indexes, review N+1 queries
- Implement caching strategy - Phoenix cache, ETS, or Redis for frequently accessed data
- Optimize LiveView updates - Use stream/3 for large lists, minimize unnecessary re-renders
- Background job optimization - Review Oban job processing patterns
- Asset optimization - Bundle analysis, code splitting for large components

## Configuration & Environment Management
- Add environment-specific configs validation at startup
- Improve secret management beyond current Streampai.Secrets
- Add feature flags system for gradual rollouts
- Add runtime configuration validation

## Code Quality & Standards
- Configure Credo rules consistently
- Regular dependency updates and security scanning

## Security & Compliance
- Standardize input validation across forms
- Add rate limiting for API endpoints
- Verify CSRF protection across application
- Add dependency security scanning

## Monitoring & Observability
- Add application metrics - Response times, error rates, user engagement
- Add business metrics tracking - Stream events, widget usage, user growth
- Implement alerting strategy for critical failures
- Add performance profiling tools integration

# Short Term
- add ability to start stream (it's basically changing some inner state in our app and creating live outputs)
  - starting stream also spawns processess observing the livestreams collecting metrics, events, metadata (like descriptions)
- when stream ends we want to delete live outputs to be sure that they won't be accidentally reused
- how do we guarantee alerts being show? Do we even try to guarantee that (I guess that's problem for later)?

# Long Term
- tell me if it's possible to monkey patch modules in elixir, it worked in DEV but `mix release` didn't allow it
- what happens if our stream manager or some platform crashes? Like do we go back to valid state?
- how do we handle user disconnecting? I think that we can wait for some predefined time like 15minutes and disable live outputs and then disable live input. 
- how do we test presence manager system
- ai chat helper that can point user to how to make some things (like can point him to correct)
 link to create widgets etc etc
- make cache macro that uses function name and arguments to cache result in ETS, write genserver that holds counter, returns counter value (incremented by one) and prints
to stdout, I'll want to confirm that multiple invocations don't print out multiple times. Macro should be configurable as in it should take in cache duration. Or maybe some library
like cachex already supports something like that?

- thumbnail generator (user can provide some of his photos or other materials that he wants in a thumbnail, we use it and plug it into stream settings)

- Streampai Donations
1. We need some way to accept donations, it would probably require some integration with payment platform
that doesn't have high fees
2. We need donation page on which users can make donations, such page should show top donors, allow to
input donor name, custom message, pick lector voice - question is how do we match top donors, by username?
- figure out how caching and singleflight could work

- allow users to be moderators (it's like limited impersonation where user can access someones account and can do few things
like moderate chat, create/edit widgets but doesn't have access to things like account balance or settings)
- what if we had some way to use AI to measure audience stream enthusiasm, maybe make summary of chat messages - things like that
- it would be also nice if we could use AI to make stream timestamps, thumbnails, maybe even modify widget CSS (crazy)? things like that 

- fix twitch icon in signup
