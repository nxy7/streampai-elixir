defmodule Streampai.Repo.Migrations.MakeMigrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create index(:user_roles, [:user_id, :role_status],
             name: "idx_user_roles_user_pending",
             where: "role_status = 'pending' AND revoked_at IS NULL"
           )

    create index(:user_roles, [:granter_id, :role_status, :revoked_at],
             name: "idx_user_roles_granter_active",
             where: "role_status = 'accepted' AND revoked_at IS NULL"
           )

    create index(:user_roles, [:user_id, :role_status, :revoked_at],
             name: "idx_user_roles_user_active",
             where: "role_status = 'accepted' AND revoked_at IS NULL"
           )

    create index(:streaming_account, [:user_id, :platform],
             name: "idx_streaming_account_user_platform",
             unique: true
           )

    create index(:streaming_account, [:access_token_expires_at],
             name: "idx_streaming_account_token_expiry"
           )

    create index(:stream_events, [:platform, :inserted_at],
             name: "idx_stream_events_platform_chrono"
           )

    create index(:stream_events, [:user_id, :inserted_at], name: "idx_stream_events_user_chrono")

    create index(:stream_events, [:livestream_id, :type, :inserted_at],
             name: "idx_stream_events_type_chrono"
           )

    create index(:stream_events, [:livestream_id, :inserted_at],
             name: "idx_stream_events_stream_chrono"
           )
  end

  def down do
    drop_if_exists index(:stream_events, [:livestream_id, :inserted_at],
                     name: "idx_stream_events_stream_chrono"
                   )

    drop_if_exists index(:stream_events, [:livestream_id, :type, :inserted_at],
                     name: "idx_stream_events_type_chrono"
                   )

    drop_if_exists index(:stream_events, [:user_id, :inserted_at],
                     name: "idx_stream_events_user_chrono"
                   )

    drop_if_exists index(:stream_events, [:platform, :inserted_at],
                     name: "idx_stream_events_platform_chrono"
                   )

    drop_if_exists index(:streaming_account, [:access_token_expires_at],
                     name: "idx_streaming_account_token_expiry"
                   )

    drop_if_exists index(:streaming_account, [:user_id, :platform],
                     name: "idx_streaming_account_user_platform"
                   )

    drop_if_exists index(:user_roles, [:user_id, :role_status, :revoked_at],
                     name: "idx_user_roles_user_active"
                   )

    drop_if_exists index(:user_roles, [:granter_id, :role_status, :revoked_at],
                     name: "idx_user_roles_granter_active"
                   )

    drop_if_exists index(:user_roles, [:user_id, :role_status],
                     name: "idx_user_roles_user_pending"
                   )
  end
end
