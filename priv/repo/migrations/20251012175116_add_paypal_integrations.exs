defmodule Streampai.Repo.Migrations.AddPaypalIntegrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:paypal_donations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :order_id, :text, null: false
      add :capture_id, :text
      add :amount, :decimal, null: false
      add :currency, :text, null: false, default: "USD"
      add :status, :text, null: false, default: "created"
      add :donor_name, :text
      add :donor_email, :text
      add :message, :text
      add :payer_id, :text
      add :approval_url, :text
      add :paypal_fee, :decimal
      add :net_amount, :decimal
      add :refund_id, :text
      add :refunded_at, :utc_datetime_usec
      add :webhook_event_id, :text
      add :metadata, :map, null: false, default: %{}
      add :displayed_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "paypal_donations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :livestream_id,
          references(:livestreams,
            column: :id,
            name: "paypal_donations_livestream_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :paypal_connection_id, :uuid
    end

    create index(:paypal_donations, [:status], name: "idx_paypal_donations_status")

    create index(:paypal_donations, [:capture_id], name: "idx_paypal_donations_capture_id")

    create index(:paypal_donations, [:order_id],
             name: "idx_paypal_donations_order_id",
             unique: true
           )

    create index(:paypal_donations, [:user_id, :inserted_at],
             name: "idx_paypal_donations_user_date"
           )

    create table(:paypal_connections, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:paypal_donations) do
      modify :paypal_connection_id,
             references(:paypal_connections,
               column: :id,
               name: "paypal_donations_paypal_connection_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:paypal_donations, [:order_id],
             name: "paypal_donations_unique_order_id_index"
           )

    alter table(:paypal_connections) do
      add :merchant_id, :text, null: false
      add :merchant_email, :text
      add :account_status, :text, null: false, default: "pending"
      add :access_token, :text
      add :refresh_token, :text
      add :token_expires_at, :utc_datetime_usec
      add :permissions, {:array, :text}, null: false, default: []
      add :onboarding_completed_at, :utc_datetime_usec
      add :last_synced_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "paypal_connections_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:paypal_connections, [:merchant_id],
             name: "paypal_connections_unique_merchant_id_index"
           )

    create unique_index(:paypal_connections, [:user_id],
             name: "paypal_connections_unique_user_paypal_index"
           )
  end

  def down do
    drop_if_exists unique_index(:paypal_connections, [:user_id],
                     name: "paypal_connections_unique_user_paypal_index"
                   )

    drop_if_exists unique_index(:paypal_connections, [:merchant_id],
                     name: "paypal_connections_unique_merchant_id_index"
                   )

    drop constraint(:paypal_connections, "paypal_connections_user_id_fkey")

    alter table(:paypal_connections) do
      remove :user_id
      remove :updated_at
      remove :inserted_at
      remove :last_synced_at
      remove :onboarding_completed_at
      remove :permissions
      remove :token_expires_at
      remove :refresh_token
      remove :access_token
      remove :account_status
      remove :merchant_email
      remove :merchant_id
    end

    drop_if_exists unique_index(:paypal_donations, [:order_id],
                     name: "paypal_donations_unique_order_id_index"
                   )

    drop constraint(:paypal_donations, "paypal_donations_paypal_connection_id_fkey")

    alter table(:paypal_donations) do
      modify :paypal_connection_id, :uuid
    end

    drop table(:paypal_connections)

    drop constraint(:paypal_donations, "paypal_donations_user_id_fkey")

    drop constraint(:paypal_donations, "paypal_donations_livestream_id_fkey")

    drop_if_exists index(:paypal_donations, [:user_id, :inserted_at],
                     name: "idx_paypal_donations_user_date"
                   )

    drop_if_exists index(:paypal_donations, [:order_id], name: "idx_paypal_donations_order_id")

    drop_if_exists index(:paypal_donations, [:capture_id],
                     name: "idx_paypal_donations_capture_id"
                   )

    drop_if_exists index(:paypal_donations, [:status], name: "idx_paypal_donations_status")

    drop table(:paypal_donations)
  end
end
