defmodule Streampai.Repo.Migrations.CreateUserRoles do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_roles, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "user_roles_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :granter_id,
          references(:users,
            column: :id,
            name: "user_roles_granter_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :role_type, :text, null: false
      add :granted_at, :utc_datetime_usec, null: false
      add :revoked_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:user_roles, [:user_id, :granter_id, :role_type],
             name: "user_roles_unique_active_role_index",
             where: "(revoked_at IS NULL)"
           )
  end

  def down do
    drop_if_exists unique_index(:user_roles, [:user_id, :granter_id, :role_type],
                     name: "user_roles_unique_active_role_index"
                   )

    drop constraint(:user_roles, "user_roles_user_id_fkey")

    drop constraint(:user_roles, "user_roles_granter_id_fkey")

    drop table(:user_roles)
  end
end
