defmodule Streampai.Repo.Migrations.AddSimplifiedViewerSystem do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:viewers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    # Add avatar column if it doesn't exist
    execute """
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='users' AND column_name='avatar'
      ) THEN
        ALTER TABLE users ADD COLUMN avatar TEXT;
      END IF;
    END $$;
    """

    create table(:stream_viewers, primary_key: false) do
      add :viewer_id,
          references(:viewers,
            column: :id,
            name: "stream_viewers_viewer_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "stream_viewers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :display_name, :text, null: false
      add :notes, :text
      add :ai_summary, :text

      add :first_seen_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_seen_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    execute "CREATE INDEX idx_stream_viewers_display_name_gin ON stream_viewers USING gin (display_name gin_trgm_ops)"

    create index(:stream_viewers, [:user_id, :last_seen_at],
             name: "idx_stream_viewers_user_last_seen"
           )

    create index(:stream_viewers, [:user_id, :display_name],
             name: "idx_stream_viewers_user_display_name"
           )

    create unique_index(:stream_viewers, [:viewer_id, :user_id],
             name: "stream_viewers_primary_key_index"
           )

    alter table(:stream_events) do
      add :viewer_id,
          references(:viewers,
            column: :id,
            name: "stream_events_viewer_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create index(:stream_events, [:viewer_id, :inserted_at],
             name: "idx_stream_events_viewer_chrono"
           )

    # Handle chat_messages table modifications with column existence checks
    execute """
    DO $$
    BEGIN
      -- Remove columns if they exist
      IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='updated_at') THEN
        ALTER TABLE chat_messages DROP COLUMN updated_at;
      END IF;
      IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='is_patreon') THEN
        ALTER TABLE chat_messages DROP COLUMN is_patreon;
      END IF;
      IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='is_moderator') THEN
        ALTER TABLE chat_messages DROP COLUMN is_moderator;
      END IF;
      IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='channel_id') THEN
        ALTER TABLE chat_messages DROP COLUMN channel_id;
      END IF;
      IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='username') THEN
        ALTER TABLE chat_messages DROP COLUMN username;
      END IF;

      -- Modify id column type
      ALTER TABLE chat_messages ALTER COLUMN id SET DEFAULT NULL;
      ALTER TABLE chat_messages ALTER COLUMN id TYPE TEXT;

      -- Add new columns if they don't exist
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='sender_username') THEN
        ALTER TABLE chat_messages ADD COLUMN sender_username TEXT NOT NULL DEFAULT '';
      END IF;
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='sender_channel_id') THEN
        ALTER TABLE chat_messages ADD COLUMN sender_channel_id TEXT NOT NULL DEFAULT '';
      END IF;
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='sender_is_moderator') THEN
        ALTER TABLE chat_messages ADD COLUMN sender_is_moderator BOOLEAN DEFAULT FALSE;
      END IF;
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='sender_is_patreon') THEN
        ALTER TABLE chat_messages ADD COLUMN sender_is_patreon BOOLEAN DEFAULT FALSE;
      END IF;
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_messages' AND column_name='viewer_id') THEN
        ALTER TABLE chat_messages ADD COLUMN viewer_id UUID REFERENCES viewers(id);
      END IF;
    END $$;
    """

    create index(:chat_messages, [:livestream_id, :inserted_at],
             name: "idx_chat_messages_stream_chrono"
           )

    create index(:chat_messages, [:inserted_at], name: "idx_chat_messages_inserted_at")

    create index(:chat_messages, [:livestream_id], name: "idx_chat_messages_livestream_id")

    create index(:chat_messages, [:user_id], name: "idx_chat_messages_user_id")

    create unique_index(:chat_messages, [:id], name: "chat_messages_primary_key_index")
  end

  def down do
    drop_if_exists unique_index(:chat_messages, [:id], name: "chat_messages_primary_key_index")

    drop constraint(:chat_messages, "chat_messages_viewer_id_fkey")

    drop_if_exists index(:chat_messages, [:user_id], name: "idx_chat_messages_user_id")

    drop_if_exists index(:chat_messages, [:livestream_id],
                     name: "idx_chat_messages_livestream_id"
                   )

    drop_if_exists index(:chat_messages, [:inserted_at], name: "idx_chat_messages_inserted_at")

    drop_if_exists index(:chat_messages, [:livestream_id, :inserted_at],
                     name: "idx_chat_messages_stream_chrono"
                   )

    alter table(:chat_messages) do
      remove :viewer_id
      remove :sender_is_patreon
      remove :sender_is_moderator
      remove :sender_channel_id
      remove :sender_username
      modify :id, :uuid, default: fragment("gen_random_uuid()")
      add :username, :text, null: false
      add :channel_id, :text, null: false
      add :is_moderator, :boolean, default: false
      add :is_patreon, :boolean, default: false

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    drop constraint(:stream_events, "stream_events_viewer_id_fkey")

    drop_if_exists index(:stream_events, [:viewer_id, :inserted_at],
                     name: "idx_stream_events_viewer_chrono"
                   )

    alter table(:stream_events) do
      remove :viewer_id
    end

    drop_if_exists unique_index(:stream_viewers, [:viewer_id, :user_id],
                     name: "stream_viewers_primary_key_index"
                   )

    drop constraint(:stream_viewers, "stream_viewers_viewer_id_fkey")

    drop constraint(:stream_viewers, "stream_viewers_user_id_fkey")

    drop_if_exists index(:stream_viewers, [:user_id, :display_name],
                     name: "idx_stream_viewers_user_display_name"
                   )

    drop_if_exists index(:stream_viewers, [:user_id, :last_seen_at],
                     name: "idx_stream_viewers_user_last_seen"
                   )

    execute "DROP INDEX IF EXISTS idx_stream_viewers_display_name_gin"

    drop table(:stream_viewers)

    # Remove avatar column if it was added by this migration
    execute """
    DO $$
    BEGIN
      IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='users' AND column_name='avatar'
      ) THEN
        ALTER TABLE users DROP COLUMN avatar;
      END IF;
    END $$;
    """

    drop table(:viewers)
  end
end
