defmodule Streampai.Repo.Migrations.RenameToDonations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # Drop old paypal_donations table if it exists (no data migration needed for new feature)
    drop_if_exists table(:paypal_donations)

    create table(:donations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :provider, :text, null: false, default: "paypal"
      add :is_streampai, :boolean, null: false, default: false
      add :external_id, :text
      add :order_id, :text
      add :capture_id, :text
      add :amount, :decimal, null: false
      add :currency, :text, null: false, default: "USD"
      add :status, :text, null: false, default: "created"
      add :donor_name, :text
      add :donor_email, :text
      add :message, :text
      add :voice, :text
      add :payer_id, :text
      add :approval_url, :text
      add :processing_fee, :decimal
      add :net_amount, :decimal
      add :refund_id, :text
      add :refunded_at, :utc_datetime_usec
      add :webhook_event_id, :text
      add :metadata, :map, null: false, default: %{}
      add :displayed_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "donations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :livestream_id,
          references(:livestreams,
            column: :id,
            name: "donations_livestream_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :paypal_connection_id,
          references(:paypal_connections,
            column: :id,
            name: "donations_paypal_connection_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create index(:donations, [:external_id],
             name: "idx_donations_external_id",
             where: "external_id IS NOT NULL"
           )

    create index(:donations, [:order_id],
             name: "idx_donations_order_id",
             where: "order_id IS NOT NULL"
           )

    create index(:donations, [:status], name: "idx_donations_status")

    create index(:donations, [:is_streampai], name: "idx_donations_is_streampai")

    create index(:donations, [:provider], name: "idx_donations_provider")

    create index(:donations, [:user_id, :inserted_at], name: "idx_donations_user_date")

    create unique_index(:donations, [:external_id, :provider],
             name: "donations_unique_external_id_index"
           )

    create unique_index(:donations, [:order_id], name: "donations_unique_order_id_index")
  end

  def down do
    drop_if_exists unique_index(:donations, [:order_id], name: "donations_unique_order_id_index")

    drop_if_exists unique_index(:donations, [:external_id, :provider],
                     name: "donations_unique_external_id_index"
                   )

    drop constraint(:donations, "donations_user_id_fkey")

    drop constraint(:donations, "donations_livestream_id_fkey")

    drop constraint(:donations, "donations_paypal_connection_id_fkey")

    drop_if_exists index(:donations, [:user_id, :inserted_at], name: "idx_donations_user_date")

    drop_if_exists index(:donations, [:provider], name: "idx_donations_provider")

    drop_if_exists index(:donations, [:is_streampai], name: "idx_donations_is_streampai")

    drop_if_exists index(:donations, [:status], name: "idx_donations_status")

    drop_if_exists index(:donations, [:order_id], name: "idx_donations_order_id")

    drop_if_exists index(:donations, [:external_id], name: "idx_donations_external_id")

    drop table(:donations)
  end
end
