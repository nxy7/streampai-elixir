defmodule Streampai.Repo.Migrations.BannedViewerResource do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:banned_viewers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :platform, :text, null: false
      add :viewer_username, :text, null: false
      add :viewer_platform_id, :text, null: false
      add :reason, :text
      add :duration_seconds, :bigint
      add :expires_at, :utc_datetime_usec
      add :is_active, :boolean, null: false, default: true
      add :platform_ban_id, :text
      add :unbanned_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "banned_viewers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :livestream_id,
          references(:livestreams,
            column: :id,
            name: "banned_viewers_livestream_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create index(:banned_viewers, [:expires_at], name: "idx_banned_viewers_expires_at")

    create index(:banned_viewers, [:user_id, :is_active], name: "idx_banned_viewers_user_active")

    create index(:banned_viewers, [:user_id, :platform, :viewer_platform_id],
             name: "idx_banned_viewers_user_platform_viewer"
           )

    create index(:banned_viewers, [:user_id], name: "idx_banned_viewers_user_id")

    create unique_index(:banned_viewers, [:user_id, :platform, :viewer_platform_id, :inserted_at],
             name: "banned_viewers_user_platform_viewer_index"
           )
  end

  def down do
    drop_if_exists unique_index(
                     :banned_viewers,
                     [:user_id, :platform, :viewer_platform_id, :inserted_at],
                     name: "banned_viewers_user_platform_viewer_index"
                   )

    drop constraint(:banned_viewers, "banned_viewers_user_id_fkey")

    drop constraint(:banned_viewers, "banned_viewers_livestream_id_fkey")

    drop_if_exists index(:banned_viewers, [:user_id], name: "idx_banned_viewers_user_id")

    drop_if_exists index(:banned_viewers, [:user_id, :platform, :viewer_platform_id],
                     name: "idx_banned_viewers_user_platform_viewer"
                   )

    drop_if_exists index(:banned_viewers, [:user_id, :is_active],
                     name: "idx_banned_viewers_user_active"
                   )

    drop_if_exists index(:banned_viewers, [:expires_at], name: "idx_banned_viewers_expires_at")

    drop table(:banned_viewers)
  end
end
