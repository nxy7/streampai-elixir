name: Elixir CI/CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-24.04-arm

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: streampai_test
          CLOUDFLARE_API_KEY: "${{ secrets.CLOUDFLARE_API_KEY }}"
          CLOUDFLARE_AUTH_EMAIL: "${{ secrets.CLOUDFLARE_AUTH_EMAIL }}"
          CLOUDFLARE_ACCOUNT_ID: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # TODO use separate environment for tests
    environment:
      name: prod
    env:
      MIX_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/streampai_test
      SECRET_KEY: test-only-secret-key
      CLOUDFLARE_API_KEY: "${{ secrets.CLOUDFLARE_API_KEY }}"
      CLOUDFLARE_AUTH_EMAIL: "${{ secrets.CLOUDFLARE_AUTH_EMAIL }}"
      CLOUDFLARE_ACCOUNT_ID: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
      MINIO_HOST: localhost
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            --network host \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio server /data

          # Wait for MinIO (should be quick with --network host)
          echo "Waiting for MinIO..."
          for i in {1..10}; do
            if curl -f http://localhost:9000/minio/health/live > /dev/null 2>&1; then
              echo "MinIO is ready!"
              break
            fi
            sleep 1
          done

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18.4"
          otp-version: "27.0"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ runner.arch }}-mix-${{ hashFiles('mix.lock') }}-${{ hashFiles('lib/**/*.ex') }}-${{ hashFiles('test/**/*.exs') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-mix-${{ hashFiles('mix.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-mix-

      - name: Cache PLT files
        uses: actions/cache@v4
        with:
          path: |
            priv/plts
          key: ${{ runner.os }}-${{ runner.arch }}-plt-${{ hashFiles('mix.lock') }}-27.0-1.18.4
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-plt-${{ hashFiles('mix.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-plt-

      - name: Install dependencies
        run: |
          mix deps.get

      - name: Create MinIO bucket
        run: |
          # Download MinIO client
          wget -q https://dl.min.io/client/mc/release/linux-arm64/mc
          chmod +x mc

          # Configure MinIO client
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin

          # Create bucket
          ./mc mb myminio/streampai-test || echo "Bucket already exists"

      - name: Check Formatting
        run: |
          mix format --check-formatted

      - name: Compile
        run: |
          echo "Compile started at: $(date)"
          START_TIME=$(date +%s)
          mix compile
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "::notice title=Compile Duration::Compilation completed in ${DURATION} seconds"

      - name: Run tests
        run: |
          echo "Test started at: $(date)" > test_timing.log
          START_TIME=$(date +%s)

          CI=true mix test --max-failures 3 --exclude external

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Test completed in: ${DURATION} seconds" >> test_timing.log
          echo "::notice title=Test Duration::Tests completed in ${DURATION} seconds"

  build:
    name: Build Docker image
    runs-on: ubuntu-24.04-arm
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest

  deploy:
    name: Deploy to production
    runs-on: ubuntu-24.04-arm
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment:
      name: prod
    env:
      ORACLE_IP: ${{ secrets.ORACLE_IP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $ORACLE_IP >> ~/.ssh/known_hosts

      - name: Copy docker-compose and deploy
        run: |
          ssh -i ~/.ssh/deploy_key ubuntu@$ORACLE_IP "mkdir -p /tmp/streampai-elixir"
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml ubuntu@$ORACLE_IP:/tmp/streampai-elixir/docker-compose.yml

          ssh -i ~/.ssh/deploy_key ubuntu@$ORACLE_IP << 'EOF'
            export GIT_SHA=${{ github.sha }}
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export GOOGLE_REDIRECT_URI="${{ vars.GOOGLE_REDIRECT_URI }}"
            export TWITCH_CLIENT_ID="${{ secrets.TWITCH_CLIENT_ID }}"
            export TWITCH_CLIENT_SECRET="${{ secrets.TWITCH_CLIENT_SECRET }}"
            export TWITCH_REDIRECT_URI="${{ vars.TWITCH_REDIRECT_URI }}"
            export CLOUDFLARE_API_KEY="${{ secrets.CLOUDFLARE_API_KEY }}"
            export CLOUDFLARE_AUTH_EMAIL="${{ secrets.CLOUDFLARE_AUTH_EMAIL }}"
            export CLOUDFLARE_ACCOUNT_ID="${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
            export ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
            export S3_HOST="${{ secrets.S3_HOST }}"
            export S3_ACCESS_KEY_ID="${{ secrets.S3_ACCESS_KEY_ID }}"
            export S3_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}"
            export S3_BUCKET="${{ secrets.S3_BUCKET }}"
            export S3_PUBLIC_URL="${{ secrets.S3_PUBLIC_URL }}"
            export ADMIN_TOKEN="${{ secrets.ADMIN_TOKEN }}"
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            export PHX_HOST="streampai.com"

            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}:latest

            cd /tmp/streampai-elixir
            docker compose -f /tmp/streampai-elixir/docker-compose.yml up -d --remove-orphans
          EOF
